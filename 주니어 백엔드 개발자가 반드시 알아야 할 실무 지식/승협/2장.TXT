API 요청 과정에서 시간을 단축시키는 부분은 주로 SQL의 결과에 대한 응답데이터를 리턴해주는 때의 시간을 중점을 본다.

응답시간이 지연되지 않도록 하는 것이 개발자의 최우선적 개발 방향이다.

이에 대한 개선 방법은 물리적해결과 논리적해결이있다.

CPU와 렘, 그리고 데이터를 저장하는 저장소를 SSD로 물리적인 스펙을 상향시켜 복잡한 식에 대한 응답 속도를 단순하고 쉽게 개선할 수 있다.

다만 가격적으로나, 실제 고객사 기준으로서도 그렇게 달갑게 생각하지 않기 때문에. 주어진 물리적환경을 고정한 상태로 행동하는 것이 다반수다.

그러므로 개선 방법은 논리적 해결 방법 밖에 없다.

DB에서 쿼리를 조회할 때는 3단계를 거친다.

DB를 연결한다.
쿼리를 실행한다.
DB 연결을 종료한다.
DB는 쿼리를 사용하는 메소드가 나올 때마다 연결하고 종료하는 것을 반복한다.

그렇다면 DB 연결/연결정료 의 시간은 쿼리 갯수만큼 시간이 지연될 수 있다.

커넥션 풀이란. 연결된 커넥션을 미리 생성해서 보관한다. 연결/연결종료를 계속 반복하지 않고, 어느 장소에 보관해둔 DB 연결된 객체를 가져와 그대로 사용이 가능하다.

갯수를 지정하여 한번에 몇개까지 바로 DB를 꺼내올수있는지 조절이 가능하다.

DB커넥션 풀의 갯수를 초과한 요청이 될 시, 해당 풀의 빈자리가 생길 때까지 다음 쿼리는 대기하게 된다.

서버 캐시는 동일한 SQL일 경우 캐시의 저장된 sql을 바로 사용하여 응답속도를 높이는 방법이다.

다만 해당 sql을 사용하던 내용이 바뀌었을 경우 캐시를 삭제하고 다시 해야할 필요가 있다.

응답 데이터가 단순히 내용이 커서 속도가 느려지는 경우. 응답 결과 값의 정보를 압축하여 속도를 개선할 수 있다.